class ByteConverter():

  def __init__(self, number, startEnding, convertToEnding):

    self.number = number
    self.startEnding = startEnding
    self.convertToEnding = convertToEnding
    self.convert()

  def convert(self):

    bit = 1
    byte = 8 * bit
    kb = 1024 * byte
    mb = 1024 * kb
    gb = 1024 * mb
    tb = 1024 * gb
    pb = 1024 * tb
    eb = 1024 * pb  # Exabyte
    zb = 1024 * eb  # Zettabyte
    yb = 1024 * zb  # Yottabyte

    # Everything in this dictionary is in terms of bits
    conversionDictionary = dict({'bits': bit, 'bytes': byte, 'kb': kb, 'mb': mb, 'gb': gb, 'tb': tb, 'pb': pb, 'eb': eb, 'zb': zb, 'yb': yb})
    
    try: 
  
      startEndingValue = conversionDictionary[self.startEnding]

      convertToEndingValue = conversionDictionary[self.convertToEnding]

      fullyConverted = (startEndingValue / convertToEndingValue) * self.number

      return fullyConverted, self.convertToEnding

    except KeyError as err:

      print('Acceptable Units of Memory = bits, bytes, kb (kilobyte), gb (gigabyte), tb (terabyte), pb (petabyte), eb (exabyte), zb (zettabyte), yb (yottabyte)' + '\n' + 'Function accepts 3 parameters -> convert(int, string1, string2)' + '\n' 
            + 'First Parameter(int) = number of items trying to convert' + '\n' + 'Second Parameter(string1) = Starting Unit of Memory' + '\n' + 'Third Parameter(string2 = Unit of Memory you want to convert to') 
      raise
